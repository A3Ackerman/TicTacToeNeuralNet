{"version":3,"sources":["App.tsx","index.tsx"],"names":["gameStatus","Intro","style","backgroundColor","getGameStatus","squares","lines","i","length","a","b","c","includes","filter","v","Square","props","className","disabled","onClick","background","toFixed","Board","useState","Array","fill","setSquares","status","setStatus","handleClick","sq","slice","Math","random","st","saveBoard","ShowTrainingBoards","title","boards","id","map","headers","board","Table","weights","bias","dataRows","forEach","row","cells","val","j","push","toString","concat","b0","parseFloat","b1","b2","RunPythonWithParam","default","N","SetN","onSubmit","e","pythonCall","preventDefault","handleSubmit","htmlFor","label","type","name","min","max","onChange","target","value","buttonText","fetch","response","text","mlcode","window","pyodide","runPythonAsync","ms","Promise","resolve","setTimeout","App","console","setConsole","pythonLoaded","setPythonLoaded","setWeights","setBias","trainData","setTrainData","testData","setTestData","generateTestGames","code","then","output","catch","err","useEffect","languagePluginLoader","loadNeuralNetScripts","delay","globals","WEIGHTS","BIASES","cp","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a1cfcd0.chunk.js","sourcesContent":["import './App.css'\n\nimport React, {useState, useEffect} from 'react'\n\n/* React code below based on https://reactjs.org/tutorial/tutorial.html */\n\nconst dec = 4\n\ntype boardVal = number | null\ntype boardArray = [boardVal, boardVal, boardVal, boardVal, boardVal, boardVal, boardVal, boardVal, boardVal]\n\ndeclare global {\n\n  interface pythonVars {\n    WEIGHTS: number[][]\n    BIASES: string[]\n  }\n\n  interface Pyodide {\n    runPythonAsync: any\n    globals: pythonVars\n  }\n\n  interface Window {\n    languagePluginLoader: any\n    pyodide: Pyodide\n  }\n}\n\n\nconst gameStatus = {\n  XWIN: \"X Wins!\",\n  OWIN: \"O Wins!\",\n  DRAW: \"Draw!\",\n  XN: \"Next Player: X\",\n  ON: \"Next Player: 0\"\n}\n\nfunction Intro() {\n  return (\n    <div>\n      <h2>Welcome to the Tic Tac Toe Neural Net!</h2>\n        <p>The networks consists of a single fully connected layer with a sigmoid activation function and cross-entropy loss function.</p>\n      <p>The goal of this project is to train a simple neural net to classify complete games of Tic Tac Toe as \"X-Wins\", \"O-Wins\", or \"Draw\", under the convention that X always plays first.</p>\n      <p>To expand the problem space beyond the finite number of possible 3x3 Tic Tac Toe boards, Xs and Os are represented by random values in the range <span style={{backgroundColor: \"#99b1f4\"}}>(0, 0.5)</span> and <span style={{backgroundColor:  \"#e4b5b5\"}}>(0.5, 1)</span> respectively.</p>\n  </div>\n  )\n}\n\nfunction getGameStatus(squares: boardArray) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if(!squares[a] || !squares[b] || !squares[c]){\n      continue  // skip loop if any of the cells in the line are empty\n    }\n\n    if (squares[a] < 0.5 && squares[b] < 0.5 && squares[c] < 0.5){\n      return gameStatus.XWIN // Class X wins\n    } else if (squares[a] >= 0.5 && squares[b] >= 0.5 && squares[c] >= 0.5) {\n      return gameStatus.OWIN; // Class Y wins\n    }\n  }\n  if(squares.includes(null)){\n    if(squares.filter(v => v === null).length % 2){\n      return gameStatus.XN\n    } else {\n      return gameStatus.ON\n    }\n  } else {\n    return gameStatus.DRAW // Class Draw\n  }\n}\n\nfunction Square(props: any) {\n\n  return (\n    <button className=\"square\" \n      disabled={props.i !== null || props.disabled} \n      onClick={props.onClick}\n      style={props.i == null ? {background: \"#fff\"} : props.i > 0.5 ? {background: \"#e4b5b5\"} : {background: \"#99b1f4\"}}\n      >\n      {props.i ? props.i.toFixed(dec): props.i}\n    </button>\n  )\n}\n\nfunction Board(props: any) {\n\n  const [squares, setSquares] = useState(Array(9).fill(null) as boardArray)\n  const [status, setStatus] = useState(gameStatus.XN)\n\n  function handleClick(i: number){\n    let sq: boardArray = squares.slice() as boardArray\n    sq[i] = status === gameStatus.XN ? Math.random()/2 : 0.5 + Math.random()/2\n    let st = getGameStatus(sq)\n    // update state, but won't take effect until after render\n    setSquares(sq)\n    setStatus(st)\n  }\n\n  function saveAndReset(){\n    props.saveBoard(squares)\n    setSquares(Array(9).fill(null) as boardArray)\n    setStatus(gameStatus.XN)\n  }\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <div className=\"status\">{status}</div>\n        <div className=\"board-row\">\n          <Square i={squares[0]} onClick={() => handleClick(0)} disabled={!(status === gameStatus.XN || status === gameStatus.ON)}/>\n          <Square i={squares[1]} onClick={() => handleClick(1)} disabled={!(status === gameStatus.XN || status === gameStatus.ON)}/>\n          <Square i={squares[2]} onClick={() => handleClick(2)} disabled={!(status === gameStatus.XN || status === gameStatus.ON)}/>\n        </div>\n        <div className=\"board-row\">\n          <Square i={squares[3]} onClick={() => handleClick(3)} disabled={!(status === gameStatus.XN || status === gameStatus.ON)}/>\n          <Square i={squares[4]} onClick={() => handleClick(4)} disabled={!(status === gameStatus.XN || status === gameStatus.ON)}/>\n          <Square i={squares[5]} onClick={() => handleClick(5)} disabled={!(status === gameStatus.XN || status === gameStatus.ON)}/>\n        </div>\n        <div className=\"board-row\">\n          <Square i={squares[6]} onClick={() => handleClick(6)} disabled={!(status === gameStatus.XN || status === gameStatus.ON)}/>\n          <Square i={squares[7]} onClick={() => handleClick(7)} disabled={!(status === gameStatus.XN || status === gameStatus.ON)}/>\n          <Square i={squares[8]} onClick={() => handleClick(8)} disabled={!(status === gameStatus.XN || status === gameStatus.ON)}/>\n        </div>\n      </div>\n      <button onClick={() => saveAndReset()} disabled={status === gameStatus.XN || status === gameStatus.ON}>Add game to Test Dataset</button>\n    </div>\n  );\n}\n\n\nfunction TrainingBoard(board: boardArray) {\n\n  return (\n    <div className='training-board'>\n      <div className=\"board-row\">\n        <Square i={board[0]}/>\n        <Square i={board[1]}/>\n        <Square i={board[2]}/>\n      </div>\n      <div className=\"board-row\">\n        <Square i={board[3]}/>\n        <Square i={board[4]}/>\n        <Square i={board[5]}/>\n      </div>\n      <div className=\"board-row\">\n        <Square i={board[6]}/>\n        <Square i={board[7]}/>\n        <Square i={board[8]}/>\n      </div>\n    </div>\n  );\n}\n\n\nfunction ShowTrainingBoards({title, boards}: {title: string, boards: boardArray[]}) {\n\n  function classifyGame(g: boardArray){\n    window.pyodide.runPythonAsync()\n  }\n\n  return (\n    <table className='training-boards'>\n      <thead>\n        <tr><th><h3>{title}</h3></th></tr>\n        <tr>\n        <th id='board'>Input Board</th>\n        <th id='label'>True Class</th>\n        <th id='pred'>Predicted Class</th>\n        </tr>\n      </thead>\n      <tbody>\n        {boards.map((b, i) => <tr key={i}><td headers=\"board\">{TrainingBoard(b)}</td><td headers='label'>{getGameStatus(b)}</td><td headers='pred'>{}</td></tr>)} \n      </tbody>\n    </table>\n  )\n\n}\n\n\ntype tableProps = {\n  weights: number[][]\n  bias: string[]\n}\n\nfunction Table({weights, bias} : tableProps) {\n  const dec = 4\n  \n  let dataRows: JSX.Element[][] = []\n\n  weights.forEach(\n    (row, i) => {\n      let cells: JSX.Element[] = []\n      row.forEach((val, j) => {\n        cells.push(\n          <td headers='weights' key={i.toString().concat(j.toString())}>{val.toFixed(dec)}</td>\n        )\n      })\n      dataRows.push(cells)\n\n    }\n  )\n  let b0: string = bias[0] == null ? \"\" : parseFloat(bias[0]).toFixed(dec)\n  let b1: string = bias[1] == null ? \"\" : parseFloat(bias[1]).toFixed(dec)\n  let b2: string = bias[2] == null ? \"\" : parseFloat(bias[2]).toFixed(dec)\n\n  return (\n      <div>\n      <table className='params-table'>\n        <thead>\n          <tr>\n            <th id='bias'></th><th id='bias'>Bias</th><th id='weights'>Weights</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr key=\"0r\"><th key=\"0h\">Class X Wins</th><td headers='bias' key=\"0b\">{b0}</td>{dataRows[0]}</tr>\n          <tr key=\"1r\"><th key=\"1h\">Class Y Wins</th><td headers='bias' key='1b'>{b1}</td>{dataRows[1]}</tr>\n          <tr key=\"2r\"><th key=\"2h\">Class Draw</th><td headers='bias' key='2b'>{b2}</td>{dataRows[2]}</tr>\n        </tbody>\n      </table>\n    </div>\n    )\n}\n\nfunction RunPythonWithParam(props: any){\n  const [N, SetN] = useState(props.default)\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    props.onSubmit(props.pythonCall + \"(\" + N + \")\")\n    e.preventDefault()\n  }\n\n  return(\n  <form onSubmit={e => handleSubmit(e)}>\n    <label htmlFor=\"quantity\">{props.label}</label>\n    <input type=\"text\" id=\"trainN\" name=\"trainN\" min=\"1\" max=\"100\" onChange={e => SetN(e.target.value)} value={N}/>\n    <input type=\"submit\" value={props.buttonText}/>\n  </form>\n  )\n}\n\nasync function loadNeuralNetScripts()  {\n  let response = await fetch('./NeuralNet.py')\n  let mlcode = await response.text()\n  window.pyodide.runPythonAsync(mlcode)\n}\n\nasync function delay(ms: number) {\n  await new Promise<void>(resolve => setTimeout( () => resolve(), ms));\n}\n\nfunction App() {\n  const [console, setConsole] = useState('Initializing Python 3.8\\n')\n  const [pythonLoaded, setPythonLoaded] = useState(false)\n  const [weights, setWeights] = useState([[],[],[]] as number[][])\n  const [bias, setBias] = useState([] as string[])\n  const [trainData, setTrainData] = useState([])\n  const [testData, setTestData] = useState([])\n\n\n  //Initialize Python\n  useEffect(() => {\n      if(!pythonLoaded){\n        window.languagePluginLoader.then(() => {\n          setPythonLoaded(true)\n          setConsole(c => c + 'Python Loaded\\n')\n\n          //load NeuralNet.py Scripts\n          loadNeuralNetScripts().then(() => {\n            setConsole(c => c + 'Neural Net Scripts Loaded\\n')\n            delay(2000).then(() => {\n              setWeights(window.pyodide.globals.WEIGHTS)\n              setBias(window.pyodide.globals.BIASES)\n              setConsole(c => c + 'Trainable parameters randomly initialized\\n')\n          })\n          }).catch((err: Error) => setConsole(c => c + err + '\\n'))\n        })\n      }  else {\n        // update values?\n        //setWeights(window.pyodide.globals.WEIGHTS)\n      }\n    }, [pythonLoaded])\n\n    function saveBoard(board: boardArray){\n      let cp = testData.slice()\n      cp.push(board)\n      setTestData(cp)\n    }\n\n    function generateTrainingGames(code: string){\n      window.pyodide.runPythonAsync(code)\n        .then((output: boardArray[])=> {\n            setTrainData(trainData.concat(output))\n        })\n        .catch((err: string) => {\n            setConsole(console + err + '\\n')\n        });\n    }\n\n    function generateTestGames(code: string){\n      window.pyodide.runPythonAsync(code)\n        .then((output: boardArray[])=> {\n            setTestData(testData.concat(output))\n        })\n        .catch((err: string) => {\n            setConsole(console + err + '\\n')\n        });\n    }\n\n  return (\n    <div className=\"App\">\n      <Intro />     \n      <div className='python-console'>{console}</div>\n      <RunPythonWithParam label=\"N = \" buttonText=\"Generate N Training Games\" default=\"50\" pythonCall=\"generate_n_games\" onSubmit={(e: string) => generateTrainingGames(e)}/>\n      <RunPythonWithParam label=\"N =  \" buttonText=\"Generate N Test Games\" default=\"20\" pythonCall=\"generate_n_games\" onSubmit={(e: string) => generateTestGames(e)}/>\n      <RunPythonWithParam label=\"N =  \" buttonText=\"Train for N Epochs\" default=\"10\" pythonCall=\"tran\" onSubmit={(e: string) => generateTestGames(e)}/>\n\n      <Board saveBoard={(b: boardArray) => saveBoard(b)}/>\n      <Table weights={weights} bias={bias}/>\n      <div>\n        <ShowTrainingBoards title={\"Training Dataset\"} boards={trainData}/>\n        <ShowTrainingBoards title={\"Test Dataset\"} boards={testData}/>\n      </div>\n    </div>\n  \n  )\n}\n\n\n// ========================================\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}