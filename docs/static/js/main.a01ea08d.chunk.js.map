{"version":3,"sources":["App.tsx","index.tsx"],"names":["Square","useState","val","setVal","dis","setDis","className","disabled","onClick","Math","random","style","background","toFixed","Board","Game","TrainingSquare","i","ShowTrainingBoards","title","boards","id","map","x","headers","board","Table","weights","bias","dataRows","forEach","row","cells","push","b0","parseFloat","b1","b2","a","fetch","response","text","mlcode","window","pyodide","runPythonAsync","ms","Promise","resolve","setTimeout","App","console","setConsole","pythonLoaded","setPythonLoaded","setWeights","setBias","useEffect","languagePluginLoader","then","c","loadNeuralNetScripts","delay","globals","WEIGHTS","BIASES","catch","err","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a01ea08d.chunk.js","sourcesContent":["import './App.css'\n\nimport React, {useState, useEffect} from 'react'\n\n/* React code below based on https://reactjs.org/tutorial/tutorial.html */\n\nconst dec = 4\n\ndeclare global {\n\n  interface pythonVars {\n    WEIGHTS: number[][]\n    BIASES: string[]\n  }\n\n  interface Pyodide {\n    runPythonAsync: any\n    globals: pythonVars\n  }\n\n  interface Window {\n    languagePluginLoader: any\n    pyodide: Pyodide\n  }\n}\n\nfunction Square() {\n  const [val, setVal] = useState(-1.000)\n  const [dis, setDis] = useState(false)\n\n  return (\n    <button className=\"square\" \n      disabled={dis} \n      onClick={() => {setVal(Math.random()); setDis(true)}}\n      style={val < 0 ? {background: \"#fff\"} : val > 0.5 ? {background: \"#e4b5b5\"} : {background: \"#99b1f4\"}}\n      >\n      {val.toFixed(dec)}\n    </button>\n  )\n}\n\nfunction Board() {\n  const status = 'Next player: X';\n\n  return (\n    <div>\n      <div className=\"status\">{status}</div>\n      <div className=\"board-row\">\n        <Square/>\n        <Square/>\n        <Square/>\n      </div>\n      <div className=\"board-row\">\n        <Square/>\n        <Square/>\n        <Square/>\n      </div>\n      <div className=\"board-row\">\n        <Square/>\n        <Square/>\n        <Square/>\n      </div>\n    </div>\n  );\n}\n\nfunction Game(){\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board />\n      </div>\n      <div className=\"game-info\">\n        <div>{/* status */}</div>\n        <ol>{/* TODO */}</ol>\n      </div>\n    </div>\n  );\n}\n\nfunction TrainingSquare(i: number) {\n\n  return (\n    <button className=\"training-square\" style={i > 0.5 ? {background: \"#e4b5b5\"} : {background: \"#99b1f4\"}}>\n      {i.toFixed(dec)}\n    </button>\n  );\n}\n\ntype boardArray = [[number, number, number], [number, number, number], [number, number, number]]\n\nfunction TrainingBoard(board: boardArray) {\n\n  return (\n    <div className='training-board'>\n      <div className=\"board-row\">\n        {TrainingSquare(board[0][0])}\n        {TrainingSquare(board[0][1])}\n        {TrainingSquare(board[0][2])}\n      </div>\n      <div className=\"board-row\">\n        {TrainingSquare(board[1][0])}\n        {TrainingSquare(board[1][1])}\n        {TrainingSquare(board[1][2])}\n      </div>\n      <div className=\"board-row\">\n        {TrainingSquare(board[2][0])}\n        {TrainingSquare(board[2][1])}\n        {TrainingSquare(board[2][2])}\n      </div>\n    </div>\n  );\n}\n\nfunction ShowTrainingBoards({title, boards}: {title: string, boards: boardArray[]}) {\n\n  return (\n    <table className='training-boards'>\n      <thead>\n        <tr><th><h3>{title}</h3></th></tr>\n        <tr>\n        <th id='board'>Input Board</th>\n        <th id='label'>True Class</th>\n        <th id='pred'>Predicted Class</th>\n        </tr>\n      </thead>\n      <tbody>\n        {boards.map(x => <tr><td headers=\"board\">{TrainingBoard(x)}</td><td headers='label'>X Wins</td><td headers='pred'>Draw</td></tr>)} \n      </tbody>\n    </table>\n  )\n\n}\n\n\ntype tableProps = {\n  weights: number[][]\n  bias: string[]\n}\n\nfunction Table({weights, bias} : tableProps) {\n  const dec = 4\n  \n  let dataRows: JSX.Element[][] = []\n\n  weights.forEach(\n    row => {\n      let cells: JSX.Element[] = []\n      row.forEach(val => {\n        cells.push(\n          <td headers='weights'>{val.toFixed(dec)}</td>\n        )\n      })\n      dataRows.push(cells)\n\n    }\n  )\n  let b0: string = bias[0] == null ? \"\" : parseFloat(bias[0]).toFixed(dec)\n  let b1: string = bias[1] == null ? \"\" : parseFloat(bias[1]).toFixed(dec)\n  let b2: string = bias[2] == null ? \"\" : parseFloat(bias[2]).toFixed(dec)\n\n  return (\n      <div>\n      <table className='params-table'>\n        <thead>\n          <tr>\n            <th id='bias'></th><th id='bias'>Bias</th><th id='weights'>Weights</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr><th>Class X Wins</th><td headers='bias'>{b0}</td>{dataRows[0]}</tr>\n          <tr><th>Class Y Wins</th><td headers='bias'>{b1}</td>{dataRows[1]}</tr>\n          <tr><th>Class Draw</th><td headers='bias'>{b2}</td>{dataRows[2]}</tr>\n        </tbody>\n      </table>\n    </div>\n    )\n}\n\nasync function loadNeuralNetScripts()  {\n  let response = await fetch('./NeuralNet.py')\n  let mlcode = await response.text()\n  window.pyodide.runPythonAsync(mlcode)\n}\n\nasync function delay(ms: number) {\n  await new Promise<void>(resolve => setTimeout( () => resolve(), ms));\n}\n\nfunction App() {\n  const [console, setConsole] = useState('Initializing Python 3.8\\n')\n  const [pythonLoaded, setPythonLoaded] = useState(false)\n  const [weights, setWeights] = useState([[],[],[]] as number[][])\n  const [bias, setBias] = useState([] as string[])\n\n  let boards: boardArray[] = [[[0.1,0.2,0.6], [0.1,0.2,0.3], [0.1,0.2,0.3]],[[0.1,0.2,0.3], [0.1,0.2,0.3], [0.1,0.2,0.3]]]\n\n  //Initialize Python\n  useEffect(() => {\n      if(!pythonLoaded){\n        window.languagePluginLoader.then(() => {\n          setPythonLoaded(true)\n          setConsole(c => c + 'Python Loaded\\n')\n\n          //load NeuralNet.py Scripts\n          loadNeuralNetScripts().then(() => {\n            setConsole(c => c + 'Neural Net Scripts Loaded\\n')\n            delay(2000).then(() => {\n              setWeights(window.pyodide.globals.WEIGHTS)\n              setBias(window.pyodide.globals.BIASES)\n              setConsole(c => c + 'Trainable parameters randomly initialized\\n')\n          })\n          }).catch((err: Error) => setConsole(c => c + err + '\\n'))\n        })\n      }  else {\n        // update values?\n        //setWeights(window.pyodide.globals.WEIGHTS)\n      }\n    }, [pythonLoaded])\n\n  return (\n    <div className=\"App\">        \n        <div className='python-console'>{console}</div>\n        <Game />\n        <Table weights={weights} bias={bias}/>\n        <div>\n          <ShowTrainingBoards title={\"Training Dataset\"} boards={boards}/>\n          <ShowTrainingBoards title={\"Test Dataset\"} boards={boards}/>\n        </div>\n        \n    </div>\n  \n  )\n}\n\n\n// ========================================\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <p>Welcome to the Tic Tac Toe Neural Net! This project is currently under development.</p>\n    <p>This is a Neural Net consisting of a single fully connected layer (no hidden layers) with a sigmoid activation function and cross-entropy loss</p>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}