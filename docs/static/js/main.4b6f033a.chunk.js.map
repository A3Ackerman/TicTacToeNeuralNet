{"version":3,"sources":["App.tsx","index.tsx"],"names":["Intro","style","backgroundColor","Square","props","className","disabled","i","onClick","background","toFixed","ShowTrainingGames","title","error","games","id","map","g","headers","board","game","label","predicted_class","Table","weights","bias","dataRows","forEach","row","cells","val","j","push","toString","concat","b0","b1","b2","RunPythonWithParam","useState","default","N","SetN","onSubmit","e","pythonCall","preventDefault","handleSubmit","htmlFor","type","name","min","max","onChange","target","value","buttonText","a","fetch","response","text","mlcode","window","pyodide","runPythonAsync","ms","Promise","resolve","setTimeout","App","console","setConsole","pythonLoaded","setPythonLoaded","WEIGHTS","BIASES","TRAINING_DATA","TEST_DATA","TRAINING_ERROR","TEST_ERROR","data","setData","callPython","code","then","output","globals","DATA","catch","err","useEffect","languagePluginLoader","c","loadNeuralNetScripts","delay","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4b6f033a.chunk.js","sourcesContent":["import './App.css'\n\nimport React, {useState, useEffect} from 'react'\n\n/* React code below based on https://reactjs.org/tutorial/tutorial.html */\n\nconst dec = 4\n\ntype boardVal = number | null\ntype boardArray = [boardVal, boardVal, boardVal, boardVal, boardVal, boardVal, boardVal, boardVal, boardVal]\n\ndeclare global {\n\n  interface game {\n    game: boardArray\n    label: number\n    predicted_class: number\n  }\n\n  interface pythonVars {\n    DATA: {\n      WEIGHTS: number[][]\n      BIASES: number[]\n      TRAINING_DATA: game[]\n      TEST_DATA: game[]\n      TRAINING_ERROR: number\n      TEST_ERROR: number\n    }\n  }\n\n  interface Pyodide {\n    runPythonAsync: any\n    globals: pythonVars\n  }\n\n  interface Window {\n    languagePluginLoader: any\n    pyodide: Pyodide\n  }\n}\n\n\nconst gameStatus = {\n  XWIN: \"X Wins!\",\n  OWIN: \"O Wins!\",\n  DRAW: \"Draw!\",\n  XN: \"Next Player: X\",\n  ON: \"Next Player: 0\"\n}\n\nfunction Intro() {\n  return (\n    <div>\n      <h2>Welcome to the Tic Tac Toe Neural Net!</h2>\n        <p>The networks consists of a single fully connected layer with a softmax activation function and cross-entropy loss function.</p>\n      <p>The goal of this project is to train a simple neural net to classify complete games of Tic Tac Toe as \"X-Wins\", \"O-Wins\", or \"Draw\", under the convention that X always plays first.</p>\n      <p>To expand the problem space beyond the finite number of possible 3x3 Tic Tac Toe boards, Xs and Os are represented by random values in the range <span style={{backgroundColor: \"#99b1f4\"}}>(-1, 0)</span> and <span style={{backgroundColor:  \"#e4b5b5\"}}>(0, 1)</span> respectively.</p>\n  </div>\n  )\n}\n\nfunction getGameStatus(squares: boardArray) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if(!squares[a] || !squares[b] || !squares[c]){\n      continue  // skip loop if any of the cells in the line are empty\n    }\n\n    if (squares[a] < 0.5 && squares[b] < 0.5 && squares[c] < 0.5){\n      return gameStatus.XWIN // Class X wins\n    } else if (squares[a] >= 0.5 && squares[b] >= 0.5 && squares[c] >= 0.5) {\n      return gameStatus.OWIN; // Class Y wins\n    }\n  }\n  if(squares.includes(null)){\n    if(squares.filter(v => v === null).length % 2){\n      return gameStatus.XN\n    } else {\n      return gameStatus.ON\n    }\n  } else {\n    return gameStatus.DRAW // Class Draw\n  }\n}\n\nfunction Square(props: any) {\n\n  return (\n    <button className=\"square\" \n      disabled={props.i !== null || props.disabled} \n      onClick={props.onClick}\n      style={props.i === 0 ? {background: \"#fff\"} : props.i > 0 ? {background: \"#e4b5b5\"} : {background: \"#99b1f4\"}}\n      >\n      {props.i ? props.i.toFixed(dec): props.i}\n    </button>\n  )\n}\n\nfunction Board(props: any) {\n\n  const [squares, setSquares] = useState(Array(9).fill(null) as boardArray)\n  const [status, setStatus] = useState(gameStatus.XN)\n\n  function handleClick(i: number){\n    let sq: boardArray = squares.slice() as boardArray\n    sq[i] = status === gameStatus.XN ? Math.random()/2 : 0.5 + Math.random()/2\n    let st = getGameStatus(sq)\n    // update state, but won't take effect until after render\n    setSquares(sq)\n    setStatus(st)\n  }\n\n  function saveAndReset(){\n    props.saveBoard(squares)\n    setSquares(Array(9).fill(null) as boardArray)\n    setStatus(gameStatus.XN)\n  }\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <div className=\"status\">{status}</div>\n        <div className=\"board-row\">\n          <Square i={squares[0]} onClick={() => handleClick(0)} disabled={!(status === gameStatus.XN || status === gameStatus.ON)}/>\n          <Square i={squares[1]} onClick={() => handleClick(1)} disabled={!(status === gameStatus.XN || status === gameStatus.ON)}/>\n          <Square i={squares[2]} onClick={() => handleClick(2)} disabled={!(status === gameStatus.XN || status === gameStatus.ON)}/>\n        </div>\n        <div className=\"board-row\">\n          <Square i={squares[3]} onClick={() => handleClick(3)} disabled={!(status === gameStatus.XN || status === gameStatus.ON)}/>\n          <Square i={squares[4]} onClick={() => handleClick(4)} disabled={!(status === gameStatus.XN || status === gameStatus.ON)}/>\n          <Square i={squares[5]} onClick={() => handleClick(5)} disabled={!(status === gameStatus.XN || status === gameStatus.ON)}/>\n        </div>\n        <div className=\"board-row\">\n          <Square i={squares[6]} onClick={() => handleClick(6)} disabled={!(status === gameStatus.XN || status === gameStatus.ON)}/>\n          <Square i={squares[7]} onClick={() => handleClick(7)} disabled={!(status === gameStatus.XN || status === gameStatus.ON)}/>\n          <Square i={squares[8]} onClick={() => handleClick(8)} disabled={!(status === gameStatus.XN || status === gameStatus.ON)}/>\n        </div>\n      </div>\n      <button onClick={() => saveAndReset()} disabled={status === gameStatus.XN || status === gameStatus.ON}>Add game to Test Dataset</button>\n    </div>\n  );\n}\n\n\nfunction TrainingBoard(board: boardArray) {\n\n  return (\n    <div className='training-board'>\n      <div className=\"board-row\">\n        <Square i={board[0]}/>\n        <Square i={board[1]}/>\n        <Square i={board[2]}/>\n      </div>\n      <div className=\"board-row\">\n        <Square i={board[3]}/>\n        <Square i={board[4]}/>\n        <Square i={board[5]}/>\n      </div>\n      <div className=\"board-row\">\n        <Square i={board[6]}/>\n        <Square i={board[7]}/>\n        <Square i={board[8]}/>\n      </div>\n    </div>\n  );\n}\n\n\nfunction ShowTrainingGames({title, error, games}: {title: string, error: number, games: game[]}) {\n\n  return (\n    <table className='training-boards'>\n      <thead>\n        <tr><th><h3>{title}</h3></th><th>Accuracy</th><th>{error.toFixed(dec)}</th></tr>\n        <tr>\n        <th id='board'>Input Board</th>\n        <th id='label'>True Class</th>\n        <th id='pred'>Predicted Class</th>\n        </tr>\n      </thead>\n      <tbody>\n        {games.map((g, i) => <tr key={i}><td headers=\"board\">{TrainingBoard(g.game)}</td><td headers='label'>{g.label}</td><td headers='pred'>{g.predicted_class}</td></tr>)} \n      </tbody>\n    </table>\n  )\n\n}\n\n\ntype tableProps = {\n  weights: number[][]\n  bias: number[]\n}\n\nfunction Table(props: any) {\n  let weights = props.weights\n  let bias = props.bias\n  \n  let dataRows: JSX.Element[][] = []\n\n  weights.forEach(\n    (row: number[], i: number) => {\n      let cells: JSX.Element[] = []\n      row.forEach((val: number, j: number) => {\n        cells.push(\n          <td headers='weights' key={i.toString().concat(j.toString())}>{val.toFixed(dec)}</td>\n        )\n      })\n      dataRows.push(cells)\n\n    }\n  )\n  let b0: string = bias[0] == null ? \"\" : bias[0].toFixed(dec)\n  let b1: string = bias[1] == null ? \"\" : bias[1].toFixed(dec)\n  let b2: string = bias[2] == null ? \"\" : bias[2].toFixed(dec)\n\n  return (\n      <div>\n      <table className='params-table'>\n        <thead>\n          <tr>\n            <th id='bias'></th><th id='bias'>Bias</th><th id='weights'>Weights</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr key=\"0r\"><th key=\"0h\">Class 0 (X Wins)</th><td headers='bias' key=\"0b\">{b0}</td>{dataRows[0]}</tr>\n          <tr key=\"1r\"><th key=\"1h\">Class 1 (Draw)</th><td headers='bias' key='1b'>{b1}</td>{dataRows[1]}</tr>\n          <tr key=\"2r\"><th key=\"2h\">Class 2 (O Wins)</th><td headers='bias' key='2b'>{b2}</td>{dataRows[2]}</tr>\n        </tbody>\n      </table>\n    </div>\n    )\n}\n\nfunction RunPythonWithParam(props: any){\n  const [N, SetN] = useState(props.default)\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    props.onSubmit(props.pythonCall + \"(\" + N + \")\")\n    e.preventDefault()\n  }\n\n  return(\n  <form onSubmit={e => handleSubmit(e)}>\n    <label htmlFor=\"quantity\">{props.label}</label>\n    <input type=\"text\" id=\"trainN\" name=\"trainN\" min=\"1\" max=\"100\" onChange={e => SetN(e.target.value)} value={N}/>\n    <input type=\"submit\" value={props.buttonText}/>\n  </form>\n  )\n}\n\nasync function loadNeuralNetScripts()  {\n  let response = await fetch('./NeuralNet.py')\n  let mlcode = await response.text()\n  window.pyodide.runPythonAsync(mlcode)\n}\n\nasync function delay(ms: number) {\n  await new Promise<void>(resolve => setTimeout( () => resolve(), ms));\n}\n\nfunction App() {\n  const [console, setConsole] = useState('Initializing Python 3.8\\n')\n  const [pythonLoaded, setPythonLoaded] = useState(false)\n  const [data, setData] = useState({\n      WEIGHTS: [] as number[][],\n      BIASES: [] as number[],\n      TRAINING_DATA: [] as game[],\n      TEST_DATA: [] as game[],\n      TRAINING_ERROR: 1 as number,\n      TEST_ERROR: 1 as number\n    } as pythonVars['DATA'])\n\n  //Initialize Python\n  useEffect(() => {\n      if(!pythonLoaded){\n        window.languagePluginLoader.then(() => {\n          setPythonLoaded(true)\n          setConsole(c => c + 'Python Loaded\\n')\n\n          //load NeuralNet.py Scripts\n          loadNeuralNetScripts().then(() => {\n            setConsole(c => c + 'Neural Net Scripts Loaded\\n')\n            delay(2000).then(() => {\n              setData(window.pyodide.globals.DATA)\n              setConsole(c => c + 'Trainable parameters randomly initialized\\n')\n          })\n          }).catch((err: Error) => setConsole(c => c + err + '\\n'))\n        })\n      }  else {\n        // update values?\n        //setWeights(window.pyodide.globals.WEIGHTS)\n      }\n    }, [pythonLoaded])\n\n    function callPython(code: string){\n      window.pyodide.runPythonAsync(code)\n        .then((output: string)=> {\n          setData(window.pyodide.globals.DATA)\n          setConsole(console + output + '\\n')\n        })\n        .catch((err: string) => {\n            setConsole(console + err + '\\n')\n        });\n    }\n\n  return (\n    <div className=\"App\">\n      <Intro />     \n      <div className='python-console'>{console}</div>\n      <RunPythonWithParam label=\"Step 1:\" buttonText=\"Generate N Training Games\" default=\"50\" pythonCall=\"generate_n_training_games\" onSubmit={(e: string) => callPython(e)}/>\n      <RunPythonWithParam label=\"Step 2:\" buttonText=\"Generate N Test Games\" default=\"20\" pythonCall=\"generate_n_test_games\" onSubmit={(e: string) => callPython(e)}/>\n      <RunPythonWithParam label=\"Step 3:\" buttonText=\"Train for N Epochs\" default=\"10\" pythonCall=\"train\" onSubmit={(e: string) => callPython(e)}/>\n      {/* <Board saveBoard={(b: boardArray) => saveBoard(b)}/> */}\n      <Table weights={data.WEIGHTS} bias={data.BIASES}/>\n      <div>\n        <ShowTrainingGames title={\"Training Dataset\"} error={data.TRAINING_ERROR} games={data.TRAINING_DATA}/>\n        <ShowTrainingGames title={\"Test Dataset\"} error={data.TEST_ERROR} games={data.TEST_DATA}/>\n      </div>\n    </div>\n  \n  )\n}\n\n\n// ========================================\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}