{"version":3,"sources":["App.tsx","index.tsx"],"names":["Square","i","className","Board","Game","Table","data","map","x","toFixed","a","fetch","response","text","mlcode","window","pyodide","runPythonAsync","App","useState","console","setConsole","pythonLoaded","setPythonLoaded","weights","setWeights","useEffect","globals","WEIGHTS","languagePluginLoader","then","c","loadNeuralNetScripts","catch","err","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iRAwBA,SAASA,EAAOC,GACd,OACE,wBAAQC,UAAU,WAMtB,SAASC,IAGP,OACE,gCACE,qBAAKD,UAAU,SAAf,SAJW,mBAKX,sBAAKA,UAAU,YAAf,UACGF,IACAA,IACAA,OAEH,sBAAKE,UAAU,YAAf,UACGF,IACAA,IACAA,OAEH,sBAAKE,UAAU,YAAf,UACGF,IACAA,IACAA,UAMT,SAASI,IACP,OACE,sBAAKF,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAACC,EAAD,MAEF,sBAAKD,UAAU,YAAf,UACE,wBACA,6BAWR,SAASG,EAAT,GAAqC,IAArBC,EAAoB,EAApBA,KAEd,OAAIA,EAEA,8BACA,kCACE,+BAAI,8CAAsBA,EAAK,GAAGC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,QALvC,SAMN,+BAAI,8CAAsBH,EAAK,GAAGC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,QANvC,SAON,+BAAI,4CAAoBH,EAAK,GAAGC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,QAPrC,cAYH,wB,4CAKX,8BAAAC,EAAA,sEACuBC,MAAM,kBAD7B,cACMC,EADN,gBAEqBA,EAASC,OAF9B,OAEMC,EAFN,OAGEC,OAAOC,QAAQC,eAAeH,GAHhC,4C,sBA8CeI,MAvCf,WAAgB,IAAD,EACiBC,mBAAS,6BAD1B,mBACNC,EADM,KACGC,EADH,OAE2BF,oBAAS,GAFpC,mBAENG,EAFM,KAEQC,EAFR,OAGiBJ,mBAAS,CAAC,GAAG,GAAG,KAHjC,mBAGNK,EAHM,KAGGC,EAHH,KAyBb,OAnBAC,qBAAU,WACFJ,EAaFG,EAAWV,OAAOC,QAAQW,QAAQC,SAZlCb,OAAOc,qBAAqBC,MAAK,WAC/BP,GAAgB,GAChBF,GAAW,SAAAU,GAAC,OAAIA,EAAI,sB,0CAGpBC,GAAuBF,MAAK,WAC1BT,GAAW,SAAAU,GAAC,OAAIA,EAAI,kCACpBN,EAAWV,OAAOC,QAAQW,QAAQC,YACjCK,OAAM,SAACC,GAAD,OAAgBb,GAAW,SAAAU,GAAC,OAAIA,EAAIG,EAAM,gBAMtD,CAACZ,EAAcE,IAIlB,sBAAKtB,UAAU,MAAf,UACI,qBAAKA,UAAU,iBAAf,SAAiCkB,IACjC,cAAChB,EAAD,IACA,cAACC,EAAD,CAAOC,KAAMkB,QC5HrBW,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,oHACA,+KACA,cAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.655fdcc9.chunk.js","sourcesContent":["import './App.css'\n\nimport React, {useState, useEffect} from 'react'\n\n/* React code below based on https://reactjs.org/tutorial/tutorial.html */\n\ndeclare global {\n\n  interface pythonVars {\n    WEIGHTS: Array<Array<number>>\n    BIASES: Array<number>\n  }\n\n  interface Pyodide {\n    runPythonAsync: any\n    globals: pythonVars\n  }\n\n  interface Window {\n    languagePluginLoader: any\n    pyodide: Pyodide\n  }\n}\n\nfunction Square(i: number) {\n  return (\n    <button className=\"square\">\n      {/* TODO */}\n    </button>\n  );\n}\n\nfunction Board() {\n  const status = 'Next player: X';\n\n  return (\n    <div>\n      <div className=\"status\">{status}</div>\n      <div className=\"board-row\">\n        {Square(0)}\n        {Square(1)}\n        {Square(2)}\n      </div>\n      <div className=\"board-row\">\n        {Square(3)}\n        {Square(4)}\n        {Square(5)}\n      </div>\n      <div className=\"board-row\">\n        {Square(6)}\n        {Square(7)}\n        {Square(8)}\n      </div>\n    </div>\n  );\n}\n\nfunction Game(){\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board />\n      </div>\n      <div className=\"game-info\">\n        <div>{/* status */}</div>\n        <ol>{/* TODO */}</ol>\n      </div>\n    </div>\n  );\n}\n\n\ntype tableProps = {\n  data: Array<Array<number>>\n}\n\nfunction Table({data} : tableProps) {\n  const dec = 4\n  if (data) {\n    return (\n      <div>\n      <table>\n        <tr><th>Class X Wins</th>{data[0].map(x => x.toFixed(dec))}</tr>\n        <tr><th>Class Y Wins</th>{data[1].map(x => x.toFixed(dec))}</tr>\n        <tr><th>Class Draw</th>{data[2].map(x => x.toFixed(dec))}</tr>\n      </table>\n    </div>\n    )\n  } else {\n    return <div></div>\n  }\n\n}\n\nasync function loadNeuralNetScripts()  {\n  let response = await fetch('./NeuralNet.py')\n  let mlcode = await response.text()\n  window.pyodide.runPythonAsync(mlcode)\n}\n\n\nfunction App() {\n  const [console, setConsole] = useState('Initializing Python 3.8\\n')\n  const [pythonLoaded, setPythonLoaded] = useState(false)\n  const [weights, setWeights] = useState([[],[],[]] as Array<Array<number>>)\n\n  //Initialize Python\n  useEffect(() => {\n      if(!pythonLoaded){\n        window.languagePluginLoader.then(() => {\n          setPythonLoaded(true)\n          setConsole(c => c + 'Python Loaded!\\n')\n\n          //load NeuralNet.py Scripts\n          loadNeuralNetScripts().then(() => {\n            setConsole(c => c + 'Neural Net Scripts Loaded!\\n')\n            setWeights(window.pyodide.globals.WEIGHTS)\n          }).catch((err: Error) => setConsole(c => c + err + '\\n'))\n        })\n      }  else {\n        // update values?\n        setWeights(window.pyodide.globals.WEIGHTS)\n      }\n    }, [pythonLoaded, weights])\n\n\n  return (\n    <div className=\"App\">        \n        <div className='python-console'>{console}</div>\n        <Game />\n        <Table data={weights}/>\n    </div>\n  \n  )\n}\n\n\n\n// ========================================\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <p>Welcome to the Tic Tac Toe Neural Net! This project is currently under development.</p>\n    <p>This is a Neural Net consisting of a single fully connected layer (no hidden layers) with a sigmoid activation function and cross-entropy loss</p>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}