{"version":3,"sources":["App.tsx","index.tsx"],"names":["train_data","require","test_data","Intro","Square","i","onClick","useState","dis","setDis","className","disabled","style","background","toFixed","Board","xNext","setXNext","Array","fill","squares","setSquares","handleClick","sq","Math","random","Game","TrainingSquare","ShowTrainingBoards","title","boards","id","map","x","headers","board","game","class","Table","weights","bias","dataRows","forEach","row","cells","val","j","push","toString","concat","b0","parseFloat","b1","b2","a","fetch","response","text","mlcode","window","pyodide","runPythonAsync","ms","Promise","resolve","setTimeout","App","console","setConsole","pythonLoaded","setPythonLoaded","setWeights","setBias","useEffect","languagePluginLoader","then","c","loadNeuralNetScripts","delay","globals","WEIGHTS","BIASES","catch","err","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3c3f1e62.chunk.js","sourcesContent":["import './App.css'\n\nimport React, {useState, useEffect} from 'react'\n\n/* React code below based on https://reactjs.org/tutorial/tutorial.html */\n\nconst dec = 4\nlet train_data = require('./train_data.json');\nlet test_data = require('./test_data.json');\n\n\ndeclare global {\n\n  interface pythonVars {\n    WEIGHTS: number[][]\n    BIASES: string[]\n  }\n\n  interface Pyodide {\n    runPythonAsync: any\n    globals: pythonVars\n  }\n\n  interface Window {\n    languagePluginLoader: any\n    pyodide: Pyodide\n  }\n}\n\nfunction Intro() {\n  return (\n    <div>\n      <h2>Welcome to the Tic Tac Toe Neural Net!</h2>\n        <p>The networks consists of a single fully connected layer with a sigmoid activation function and cross-entropy loss function</p>\n      <p>The goal of this project is to train a simple neural net to classify complete games of Tic Tac Toe as \"X-Wins\", \"O-Wins\", or \"Draw\".</p>\n      <p>To expand the problem space beyond the finite number of possible 3x3 Tic Tac Toe boards, Xs and Os are represented by random values in the range (0, 0.5) and (0.5, 1) respectively.</p>\n  </div>\n  )\n}\n\nfunction Square({i, onClick}: {i: number, onClick: Function}) {\n  const [dis, setDis] = useState(false)\n\n  return (\n    <button className=\"square\" \n      disabled={dis} \n      onClick={() => {onClick(); setDis(true)}}\n      style={i == null ? {background: \"#fff\"} : i > 0.5 ? {background: \"#e4b5b5\"} : {background: \"#99b1f4\"}}\n      >\n      {i ? i.toFixed(dec): i}\n    </button>\n  )\n}\n\nfunction Board() {\n  const [xNext, setXNext] = useState(true)\n  const [squares, setSquares] = useState(Array(9).fill(null))\n\n  function handleClick(i: number){\n    let sq: number[] = squares\n    sq[i] = xNext ? Math.random()/2 : 0.5 + Math.random()/2\n    setSquares(sq)\n    setXNext(!xNext)\n  }\n\n  return (\n    <div className=\"game-board\">\n      <div className=\"status\">{xNext ? \"Next player: X\": \"Next player: O\"}</div>\n      <div className=\"board-row\">\n        <Square i={squares[0]} onClick={() => handleClick(0)}/>\n        <Square i={squares[1]} onClick={() => handleClick(1)}/>\n        <Square i={squares[2]} onClick={() => handleClick(2)}/>\n      </div>\n      <div className=\"board-row\">\n        <Square i={squares[3]} onClick={() => handleClick(3)}/>\n        <Square i={squares[4]} onClick={() => handleClick(4)}/>\n        <Square i={squares[5]} onClick={() => handleClick(5)}/>\n      </div>\n      <div className=\"board-row\">\n        <Square i={squares[6]} onClick={() => handleClick(6)}/>\n        <Square i={squares[7]} onClick={() => handleClick(7)}/>\n        <Square i={squares[8]} onClick={() => handleClick(8)}/>\n      </div>\n    </div>\n  );\n}\n\nfunction Game(){\n  return (\n    <div className=\"game\">\n      <Board /> \n      <div className=\"game-info\">\n        <div>{/* status */}</div>\n        <ol>{/* TODO */}</ol>\n      </div>\n    </div>\n  );\n}\n\nfunction TrainingSquare(i: number) {\n\n  return (\n    <button className=\"training-square\" style={i > 0.5 ? {background: \"#e4b5b5\"} : {background: \"#99b1f4\"}}>\n      {i.toFixed(dec)}\n    </button>\n  );\n}\n\ntype boardArray = [number, number, number, number, number, number, number, number, number]\n\nfunction TrainingBoard(board: boardArray) {\n\n  return (\n    <div className='training-board'>\n      <div className=\"board-row\">\n        {TrainingSquare(board[0])}\n        {TrainingSquare(board[1])}\n        {TrainingSquare(board[2])}\n      </div>\n      <div className=\"board-row\">\n        {TrainingSquare(board[3])}\n        {TrainingSquare(board[4])}\n        {TrainingSquare(board[5])}\n      </div>\n      <div className=\"board-row\">\n        {TrainingSquare(board[6])}\n        {TrainingSquare(board[7])}\n        {TrainingSquare(board[8])}\n      </div>\n    </div>\n  );\n}\n\n\ntype json_board = {game: boardArray, class: number}\n\nfunction ShowTrainingBoards({title, boards}: {title: string, boards: json_board[]}) {\n\n  return (\n    <table className='training-boards'>\n      <thead>\n        <tr><th><h3>{title}</h3></th></tr>\n        <tr>\n        <th id='board'>Input Board</th>\n        <th id='label'>True Class</th>\n        <th id='pred'>Predicted Class</th>\n        </tr>\n      </thead>\n      <tbody>\n        {boards.map((x, i) => <tr key={i}><td headers=\"board\">{TrainingBoard(x.game)}</td><td headers='label'>{x.class}</td><td headers='pred'>None</td></tr>)} \n      </tbody>\n    </table>\n  )\n\n}\n\n\ntype tableProps = {\n  weights: number[][]\n  bias: string[]\n}\n\nfunction Table({weights, bias} : tableProps) {\n  const dec = 4\n  \n  let dataRows: JSX.Element[][] = []\n\n  weights.forEach(\n    (row, i) => {\n      let cells: JSX.Element[] = []\n      row.forEach((val, j) => {\n        cells.push(\n          <td headers='weights' key={i.toString().concat(j.toString())}>{val.toFixed(dec)}</td>\n        )\n      })\n      dataRows.push(cells)\n\n    }\n  )\n  let b0: string = bias[0] == null ? \"\" : parseFloat(bias[0]).toFixed(dec)\n  let b1: string = bias[1] == null ? \"\" : parseFloat(bias[1]).toFixed(dec)\n  let b2: string = bias[2] == null ? \"\" : parseFloat(bias[2]).toFixed(dec)\n\n  return (\n      <div>\n      <table className='params-table'>\n        <thead>\n          <tr>\n            <th id='bias'></th><th id='bias'>Bias</th><th id='weights'>Weights</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr key=\"0r\"><th key=\"0h\">Class X Wins</th><td headers='bias' key=\"0b\">{b0}</td>{dataRows[0]}</tr>\n          <tr key=\"1r\"><th key=\"1h\">Class Y Wins</th><td headers='bias' key='1b'>{b1}</td>{dataRows[1]}</tr>\n          <tr key=\"2r\"><th key=\"2h\">Class Draw</th><td headers='bias' key='2b'>{b2}</td>{dataRows[2]}</tr>\n        </tbody>\n      </table>\n    </div>\n    )\n}\n\nasync function loadNeuralNetScripts()  {\n  let response = await fetch('./NeuralNet.py')\n  let mlcode = await response.text()\n  window.pyodide.runPythonAsync(mlcode)\n}\n\nasync function delay(ms: number) {\n  await new Promise<void>(resolve => setTimeout( () => resolve(), ms));\n}\n\nfunction App() {\n  const [console, setConsole] = useState('Initializing Python 3.8\\n')\n  const [pythonLoaded, setPythonLoaded] = useState(false)\n  const [weights, setWeights] = useState([[],[],[]] as number[][])\n  const [bias, setBias] = useState([] as string[])\n\n\n\n  //Initialize Python\n  useEffect(() => {\n      if(!pythonLoaded){\n        window.languagePluginLoader.then(() => {\n          setPythonLoaded(true)\n          setConsole(c => c + 'Python Loaded\\n')\n\n          //load NeuralNet.py Scripts\n          loadNeuralNetScripts().then(() => {\n            setConsole(c => c + 'Neural Net Scripts Loaded\\n')\n            delay(2000).then(() => {\n              setWeights(window.pyodide.globals.WEIGHTS)\n              setBias(window.pyodide.globals.BIASES)\n              setConsole(c => c + 'Trainable parameters randomly initialized\\n')\n          })\n          }).catch((err: Error) => setConsole(c => c + err + '\\n'))\n        })\n      }  else {\n        // update values?\n        //setWeights(window.pyodide.globals.WEIGHTS)\n      }\n    }, [pythonLoaded])\n\n\n  return (\n    <div className=\"App\">\n      <Intro />     \n      <div className='python-console'>{console}</div>\n      <Game />\n      <Table weights={weights} bias={bias}/>\n      <div>\n        <ShowTrainingBoards title={\"Training Dataset\"} boards={train_data}/>\n        <ShowTrainingBoards title={\"Test Dataset\"} boards={test_data}/>\n      </div>\n    </div>\n  \n  )\n}\n\n\n// ========================================\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}