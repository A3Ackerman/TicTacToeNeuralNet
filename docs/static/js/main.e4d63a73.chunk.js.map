{"version":3,"sources":["App.tsx","index.tsx"],"names":["Square","i","className","onClick","alert","Board","Game","TrainingSquare","style","background","toFixed","ShowTrainingBoards","map","x","board","Table","weights","bias","dataRows","forEach","row","cells","val","push","headers","b0","parseFloat","b1","b2","id","a","fetch","response","text","mlcode","window","pyodide","runPythonAsync","ms","Promise","resolve","setTimeout","App","useState","console","setConsole","pythonLoaded","setPythonLoaded","setWeights","setBias","useEffect","languagePluginLoader","then","c","loadNeuralNetScripts","delay","globals","WEIGHTS","BIASES","catch","err","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e4d63a73.chunk.js","sourcesContent":["import './App.css'\n\nimport React, {useState, useEffect} from 'react'\n\n/* React code below based on https://reactjs.org/tutorial/tutorial.html */\n\ndeclare global {\n\n  interface pythonVars {\n    WEIGHTS: number[][]\n    BIASES: string[]\n  }\n\n  interface Pyodide {\n    runPythonAsync: any\n    globals: pythonVars\n  }\n\n  interface Window {\n    languagePluginLoader: any\n    pyodide: Pyodide\n  }\n}\n\nfunction Square(i: number) {\n  return (\n    <button className=\"square\" onClick={(() => alert('click'))}>\n      {i}\n    </button>\n  )\n}\n\nfunction Board() {\n  const status = 'Next player: X';\n\n  return (\n    <div>\n      <div className=\"status\">{status}</div>\n      <div className=\"board-row\">\n        {Square(0)}\n        {Square(1)}\n        {Square(2)}\n      </div>\n      <div className=\"board-row\">\n        {Square(3)}\n        {Square(4)}\n        {Square(5)}\n      </div>\n      <div className=\"board-row\">\n        {Square(6)}\n        {Square(7)}\n        {Square(8)}\n      </div>\n    </div>\n  );\n}\n\nfunction Game(){\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board />\n      </div>\n      <div className=\"game-info\">\n        <div>{/* status */}</div>\n        <ol>{/* TODO */}</ol>\n      </div>\n    </div>\n  );\n}\n\nfunction TrainingSquare(i: number) {\n  const dec = 4\n\n  return (\n    <button className=\"training-square\" style={i > 0.5 ? {background: \"#e4b5b5\"} : {background: \"#99b1f4\"}}>\n      {i.toFixed(dec)}\n    </button>\n  );\n}\n\ntype boardArray = [[number, number, number], [number, number, number], [number, number, number]]\n\nfunction TrainingBoard(board: boardArray) {\n\n  return (\n    <div className='training-board'>\n      <div className=\"board-row\">\n        {TrainingSquare(board[0][0])}\n        {TrainingSquare(board[0][1])}\n        {TrainingSquare(board[0][2])}\n      </div>\n      <div className=\"board-row\">\n        {TrainingSquare(board[1][0])}\n        {TrainingSquare(board[1][1])}\n        {TrainingSquare(board[1][2])}\n      </div>\n      <div className=\"board-row\">\n        {TrainingSquare(board[2][0])}\n        {TrainingSquare(board[2][1])}\n        {TrainingSquare(board[2][2])}\n      </div>\n    </div>\n  );\n}\n\nfunction ShowTrainingBoards() {\n\n  let boards: boardArray[] = [[[0.1,0.2,0.6], [0.1,0.2,0.3], [0.1,0.2,0.3]],[[0.1,0.2,0.3], [0.1,0.2,0.3], [0.1,0.2,0.3]]]\n\n  return (\n    <div className='training-boards'>\n      Training Data\n      <ul>\n        {boards.map(x => <li>{TrainingBoard(x)}</li>)}\n      </ul>\n    </div>\n  )\n\n}\n\n\ntype tableProps = {\n  weights: number[][]\n  bias: string[]\n}\n\nfunction Table({weights, bias} : tableProps) {\n  const dec = 4\n  \n  let dataRows: JSX.Element[][] = []\n\n  weights.forEach(\n    row => {\n      let cells: JSX.Element[] = []\n      row.forEach(val => {\n        cells.push(\n          <td headers='weights'>{val.toFixed(dec)}</td>\n        )\n      })\n      dataRows.push(cells)\n\n    }\n  )\n  let b0: string = bias[0] == null ? \"\" : parseFloat(bias[0]).toFixed(dec)\n  let b1: string = bias[1] == null ? \"\" : parseFloat(bias[1]).toFixed(dec)\n  let b2: string = bias[2] == null ? \"\" : parseFloat(bias[2]).toFixed(dec)\n\n  return (\n      <div>\n      <table className='params-table'>\n        <thead>\n          <tr>\n            <th id='bias'></th><th id='bias'>Bias</th><th id='weights'>Weights</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr><th>Class X Wins</th><td key='bias'>{b0}</td>{dataRows[0]}</tr>\n          <tr><th>Class Y Wins</th><td key='bias'>{b1}</td>{dataRows[1]}</tr>\n          <tr><th>Class Draw</th><td key='bias'>{b2}</td>{dataRows[2]}</tr>\n        </tbody>\n      </table>\n    </div>\n    )\n}\n\nasync function loadNeuralNetScripts()  {\n  let response = await fetch('./NeuralNet.py')\n  let mlcode = await response.text()\n  window.pyodide.runPythonAsync(mlcode)\n}\n\nasync function delay(ms: number) {\n  await new Promise<void>(resolve => setTimeout( () => resolve(), ms));\n}\n\nfunction App() {\n  const [console, setConsole] = useState('Initializing Python 3.8\\n')\n  const [pythonLoaded, setPythonLoaded] = useState(false)\n  const [weights, setWeights] = useState([[],[],[]] as number[][])\n  const [bias, setBias] = useState([] as string[])\n\n  //Initialize Python\n  useEffect(() => {\n      if(!pythonLoaded){\n        window.languagePluginLoader.then(() => {\n          setPythonLoaded(true)\n          setConsole(c => c + 'Python Loaded\\n')\n\n          //load NeuralNet.py Scripts\n          loadNeuralNetScripts().then(() => {\n            setConsole(c => c + 'Neural Net Scripts Loaded\\n')\n            delay(2000).then(() => {\n              setWeights(window.pyodide.globals.WEIGHTS)\n              setBias(window.pyodide.globals.BIASES)\n              setConsole(c => c + 'Trainable parameters randomly initialized\\n')\n          })\n          }).catch((err: Error) => setConsole(c => c + err + '\\n'))\n        })\n      }  else {\n        // update values?\n        //setWeights(window.pyodide.globals.WEIGHTS)\n      }\n    }, [pythonLoaded])\n\n  return (\n    <div className=\"App\">        \n        <div className='python-console'>{console}</div>\n        <Game />\n        <Table weights={weights} bias={bias}/>\n        <ShowTrainingBoards/>\n    </div>\n  \n  )\n}\n\n\n// ========================================\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <p>Welcome to the Tic Tac Toe Neural Net! This project is currently under development.</p>\n    <p>This is a Neural Net consisting of a single fully connected layer (no hidden layers) with a sigmoid activation function and cross-entropy loss</p>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}