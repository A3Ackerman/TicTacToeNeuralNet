{"ast":null,"code":"/*\nfunction addToOutput(s) {\n    output.value += '>>>' + code.value + '\\n' + s + '\\n';\n}\n\noutput.value = 'Initializing...\\n';\n// init pyodide and load Relevant Python Scripts\nlanguagePluginLoader.then(() => {\n    output.value += 'Python Loaded!\\n';\n    loadNeuralNetScripts();\n});\n\nasync function evaluatePython() {\n    pyodide.runPythonAsync(code.value)\n        .then(output => {\n            addToOutput(output);\n            updateTable();\n        })\n        .catch((err) => {\n            addToOutput(err)\n        });\n}\n\nasync function loadNeuralNetScripts() {\n    response = await fetch('/NeuralNet.py');\n    mlcode = await response.text();\n    pyodide.runPythonAsync(mlcode)\n        .then(() => {\n            output.value += 'Neural Net Scripts Loaded!\\n';\n            updateTable();\n        })\n        .catch((err) => output.value += err);\n}\n\nasync function updateTable() {\n    var table = document.getElementById(\"weights\");\n    var rows = table.rows;\n    var weights = await pyodide.globals.WEIGHTS;\n    for (i = 0; i < weights.length; i++) {\n        var row = rows.item(i + 1);\n        var vals = weights[i];\n        for (j = 0; j < vals.length; j++) {\n            try {\n                row.deleteCell(j + 1);\n            } catch (err) {\n                // console.log(err)\n            }\n            var cell = row.insertCell(j + 1);\n            cell.innerText = parseFloat(vals[j]).toFixed(4);\n        }\n    }\n}\n*/","map":{"version":3,"sources":["/Users/alexanderackerman/Code/TicTacToeNeuralNet/src/pyodide-scripts.js"],"names":[],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["\n/*\nfunction addToOutput(s) {\n    output.value += '>>>' + code.value + '\\n' + s + '\\n';\n}\n\noutput.value = 'Initializing...\\n';\n// init pyodide and load Relevant Python Scripts\nlanguagePluginLoader.then(() => {\n    output.value += 'Python Loaded!\\n';\n    loadNeuralNetScripts();\n});\n\nasync function evaluatePython() {\n    pyodide.runPythonAsync(code.value)\n        .then(output => {\n            addToOutput(output);\n            updateTable();\n        })\n        .catch((err) => {\n            addToOutput(err)\n        });\n}\n\nasync function loadNeuralNetScripts() {\n    response = await fetch('/NeuralNet.py');\n    mlcode = await response.text();\n    pyodide.runPythonAsync(mlcode)\n        .then(() => {\n            output.value += 'Neural Net Scripts Loaded!\\n';\n            updateTable();\n        })\n        .catch((err) => output.value += err);\n}\n\nasync function updateTable() {\n    var table = document.getElementById(\"weights\");\n    var rows = table.rows;\n    var weights = await pyodide.globals.WEIGHTS;\n    for (i = 0; i < weights.length; i++) {\n        var row = rows.item(i + 1);\n        var vals = weights[i];\n        for (j = 0; j < vals.length; j++) {\n            try {\n                row.deleteCell(j + 1);\n            } catch (err) {\n                // console.log(err)\n            }\n            var cell = row.insertCell(j + 1);\n            cell.innerText = parseFloat(vals[j]).toFixed(4);\n        }\n    }\n}\n*/"]},"metadata":{},"sourceType":"module"}