{"ast":null,"code":"var _jsxFileName = \"/Users/alexanderackerman/Code/TicTacToeNeuralNet/src/App.tsx\";\nimport React from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst output = document.getElementById(\"python-console\");\nconst code = document.getElementById(\"code\");\nconst weights = document.getElementById(\"weights\");\n\nfunction addToOutput(s) {\n  output.value += '>>>' + code.value + '\\n' + s + '\\n';\n}\n\noutput.value = 'Initializing...\\n'; // init pyodide and load Relevant Python Scripts\n\nlanguagePluginLoader.then(() => {\n  output.value += 'Python Loaded!\\n';\n  loadNeuralNetScripts();\n});\n\nasync function evaluatePython() {\n  pyodide.runPythonAsync(code.value).then(output => {\n    addToOutput(output);\n    updateTable();\n  }).catch(err => {\n    addToOutput(err);\n  });\n}\n\nasync function loadNeuralNetScripts() {\n  response = await fetch('/NeuralNet.py');\n  mlcode = await response.text();\n  pyodide.runPythonAsync(mlcode).then(() => {\n    output.value += 'Neural Net Scripts Loaded!\\n';\n    updateTable();\n  }).catch(err => output.value += err);\n}\n\nasync function updateTable() {\n  var table = document.getElementById(\"weights\");\n  var rows = table.rows;\n  var weights = await pyodide.globals.WEIGHTS;\n\n  for (i = 0; i < weights.length; i++) {\n    var row = rows.item(i + 1);\n    var vals = weights[i];\n\n    for (j = 0; j < vals.length; j++) {\n      try {\n        row.deleteCell(j + 1);\n      } catch (err) {// console.log(err)\n      }\n\n      var cell = row.insertCell(j + 1);\n      cell.innerText = parseFloat(vals[j]).toFixed(4);\n    }\n  }\n}\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Welcome to the Tic Tac Toe Neural Net! This project is currently under development.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This is a Neural Net consisting of a single fully connected layer (no hidden layers) with a sigmoid activation function and cross-entropy loss\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"python-console\",\n        children: output\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/alexanderackerman/Code/TicTacToeNeuralNet/src/App.tsx"],"names":["React","output","document","getElementById","code","weights","addToOutput","s","value","languagePluginLoader","then","loadNeuralNetScripts","evaluatePython","pyodide","runPythonAsync","updateTable","catch","err","response","fetch","mlcode","text","table","rows","globals","WEIGHTS","i","length","row","item","vals","j","deleteCell","cell","insertCell","innerText","parseFloat","toFixed","App"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst output = document.getElementById(\"python-console\");\nconst code = document.getElementById(\"code\");\nconst weights = document.getElementById(\"weights\");\n\nfunction addToOutput(s : string) {\n    output.value += '>>>' + code.value + '\\n' + s + '\\n';\n}\n\noutput.value = 'Initializing...\\n';\n// init pyodide and load Relevant Python Scripts\nlanguagePluginLoader.then(() => {\n    output.value += 'Python Loaded!\\n';\n    loadNeuralNetScripts();\n});\n\nasync function evaluatePython() {\n    pyodide.runPythonAsync(code.value)\n        .then(output => {\n            addToOutput(output);\n            updateTable();\n        })\n        .catch((err) => {\n            addToOutput(err)\n        });\n}\n\nasync function loadNeuralNetScripts() {\n    response = await fetch('/NeuralNet.py');\n    mlcode = await response.text();\n    pyodide.runPythonAsync(mlcode)\n        .then(() => {\n            output.value += 'Neural Net Scripts Loaded!\\n';\n            updateTable();\n        })\n        .catch((err) => output.value += err);\n}\n\nasync function updateTable() {\n    var table = document.getElementById(\"weights\");\n    var rows = table.rows;\n    var weights = await pyodide.globals.WEIGHTS;\n    for (i = 0; i < weights.length; i++) {\n        var row = rows.item(i + 1);\n        var vals = weights[i];\n        for (j = 0; j < vals.length; j++) {\n            try {\n                row.deleteCell(j + 1);\n            } catch (err) {\n                // console.log(err)\n            }\n            var cell = row.insertCell(j + 1);\n            cell.innerText = parseFloat(vals[j]).toFixed(4);\n        }\n    }\n}\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>Welcome to the Tic Tac Toe Neural Net! This project is currently under development.</p>\n        <p>This is a Neural Net consisting of a single fully connected layer (no hidden layers) with a sigmoid activation function and cross-entropy loss</p>\n        <textarea id='python-console'>{output}</textarea>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}